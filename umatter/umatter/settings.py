"""
Django settings for umatter project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

from core.utils import load_env, get_env
from corsheaders.defaults import (
    default_headers, default_methods
)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env("DJANGO_SECRET_KEY", "secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env("DJANGO_DEBUG", 'true') == "true"

ALLOWED_HOSTS = get_env("DJANGO_ALLOWED_HOSTS", "").split()
ACCESS_CONTROL_ALLOW_HEADERS = list(default_headers) + \
    get_env("DJANGO_ACCESS_CONTROL_ALLOW_HEADERS", "").split()
ACCESS_CONTROL_ALLOW_METHODS = list(default_methods) + \
    get_env("DJANGO_ACCESS_CONTROL_ALLOW_METHODS", "").split()
CORS_ALLOW_CREDENTIALS = get_env("DJANGO_CORS_ALLOW_CREDENTIALS", 'true') == 'true'
CORS_ORIGIN_ALLOW_ALL = get_env("DJANGO_CORS_ORIGIN_ALLOW_ALL", 'false') == 'true'
CORS_ORIGIN_WHITELIST = get_env("DJANGO_CORS_ORIGIN_WHITELIST", "").split()
CSRF_COOKIE_HTTPONLY = get_env("DJANGO_CSRF_COOKIE_HTTPONLY", 'true') == 'true'
CSRF_TRUSTED_ORIGINS = get_env("DJANGO_CSRF_TRUSTED_ORIGINS", "").split()
CSRF_USE_SESSIONS = get_env("DJANGO_CSRF_USE_SESSIONS", 'true') == 'true'
SESSION_COOKIE_HTTPONLY = get_env("DJANGO_SESSION_COOKIE_HTTPONLY", 'true') == 'true'
SESSION_COOKIE_DOMAIN = get_env("DJANGO_SESSION_COOKIE_DOMAIN", None)
SESSION_COOKIE_SAMESITE = get_env("DJANGO_SESSION_COOKIE_SAMESITE", "None")
SESSION_COOKIE_SECURE = get_env("DJANGO_SESSION_COOKIE_SECURE", 'true') == 'true'
SECURE_CROSS_ORIGIN_OPENER_POLICY = get_env("DJANGO_SECURE_CROSS_ORIGIN_OPENER_POLICY", "unsafe-none")

BASE_URL = get_env("DJANGO_BASE_URL", "")
CLIENT_BASE_URL = get_env("DJANGO_CLIENT_BASE_URL", "")
NLP_API_HOST = get_env('NLP_API_HOST', "")

FIXTURE_DIRS = [
    BASE_DIR / 'fixtures',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # app
    'event',
    'friend',
    'message',
    'user',

    'drf_yasg',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.kakao',

    # cors
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Add the account middleware:
    "allauth.account.middleware.AccountMiddleware",

    # cors
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = 'umatter.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` needs this from django
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'umatter.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    # primary db
    'default': {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": get_env("POSTGRES_DB", ""),
        "USER": get_env("POSTGRES_USER", ""),
        "PASSWORD": get_env("POSTGRES_PASSWORD", ""),
        "HOST": get_env("POSTGRES_HOST", ""),
        "PORT": get_env("POSTGRES_PORT", ""),
        # "OPTIONS": {},
    },
    # # replica of the primary db
    # 'replica': {
    #     "ENGINE": "django.db.backends.postgresql",
    #     "NAME": get_env("SUB_POSTGRES_DB", ""),
    #     "USER": get_env("SUB_POSTGRES_USER", ""),
    #     "PASSWORD": get_env("SUB_POSTGRES_PASSWORD", ""),
    #     "HOST": get_env("SUB_POSTGRES_HOST", ""),
    #     "PORT": get_env("SUB_POSTGRES_PORT", ""),
    #     # "OPTIONS": {},
    # },
}
# DATABASE_ROUTERS = []


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = get_env("DJANGO_TIMEZONE")

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        },
        "verbose": {
            'format': '[{asctime}] {levelname} {module} {message}',
            'style': '{',
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
        "verbose": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        # app logger
        "event": {
            "handlers": ["verbose"],
            "level": "INFO",
        },
        "friend": {
            "handlers": ["verbose"],
            "level": "INFO",
        },
        "user": {
            "handlers": ["verbose"],
            "level": "INFO",
        },
        "message": {
            "handlers": ["verbose"],
            "level": "INFO",
        },
    },
}

AUTH_USER_MODEL = 'user.User'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
    	# 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication'
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated', # 인증된 사용자만 접근
        'rest_framework.permissions.IsAdminUser', # 관리자만 접근
        # 'rest_framework.permissions.AllowAny', # 누구나 접근
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

SITE_ID = 1
SOCIALACCOUNT_LOGIN_ON_GET = True
LOGIN_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGOUT_REDIRECT_URL = "/"
SOCIALACCOUNT_PROVIDERS = {
    'kakao': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': get_env("AUTH_KAKAO_CLIENT_ID", "secret"),
            'secret': get_env("AUTH_KAKAO_SECRET", "secret"),
            'key': ''
        }
    }
}
